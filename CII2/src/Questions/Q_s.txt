package Questions;

import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.core.behaviours.OneShotBehaviour;
import jade.domain.DFService;
import jade.domain.FIPAAgentManagement.*;
import jade.domain.FIPAException;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;
import jade.wrapper.AgentController;
import jade.wrapper.ContainerController;
import jade.wrapper.StaleProxyException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

public class Questions extends Agent
{
    private ArrayList<Question> data;
    private ArrayList<Question> sendQ   = new ArrayList<>();
    private int                 minComp = 0, maxComp = 0;
    private int lastQFound = 0;
    private int questionCount = 0;


    @Override
    public void setup()
    {
        data = new ArrayList<>();

        //QuestionsGui myGui = new QuestionsGui(this);
        //myGui.showGui();

        this.addQuestion();

        DFAgentDescription dfd = new DFAgentDescription();
        dfd.setName(getAID());
        ServiceDescription sd = new ServiceDescription();
        sd.setType("questions-agent");
        sd.setName("Questions-storage");
        dfd.addServices(sd);

        try
        {
            DFService.register(this, dfd);
        }
        catch (FIPAException fe)
        {
            fe.printStackTrace();
        }

    }

    //Добавление с файла
    //*
    public void addQuestion() throws FileNotFoundException //throws java.lang.Exception //String nameQuestion, String nameSubj, int complex
    {
        Scanner sc = new Scanner(new File("input.txt"));

        //int tempCompl;
        int compl = 0;// = 0;

        String [] splitted;

        //String nameQuestion;

        String namesSubj = null;

        while(sc.hasNext()) {
            splitted = sc.nextLine().split(";");
            //tempQwest = splitted[0];
            nameQuestion = splitted[0];

            //tempTemat = splitted[1];
            namesSubj = splitted[1];

            //tempCompl = Integer.parseInt(splitted[2]);
            compl = Integer.parseInt(splitted[2]);

            System.out.println(nameQuestion + "," + namesSubj + "," + compl);


            String finalNamesSubj = namesSubj;
            int finalComple = compl;
            String finalnameQuestion = nameQuestion;

            addBehaviour(new OneShotBehaviour() {
                @Override
                public void action() {
                    Random rnd = new Random();

                    //??
                    ContainerController cc = getContainerController();

                        try {
                            cc.createNewAgent("questionAgent" + System.currentTimeMillis(),
                                    "Questions.Question", new Object[]{finalnameQuestion, finalNamesSubj, finalComple, 1}).start(); // nameQuestion = вопрос
                            doWait(5);
                        } catch (StaleProxyException e) {
                            e.printStackTrace();
                        }
                }
            });
        }
    }

    public Question getQuestion(String nameSubj)
    {
        for (Question q : data)
        {
            if (q.getNameSubj().equalsIgnoreCase(nameSubj))
            {
                return q;
            }
        }
        return null;
    }

    public Question getQuestion(int complex, String subj)
    {
        ListIterator<Question> iter;
        for (iter = data.listIterator(); iter.hasNext(); )
        {
            int t = iter.nextIndex();
            Question q = iter.next();
            if (q.getComplex() == complex && !q.getNameSubj().equals(subj) && !sendQ.contains(q))
            {
                return q;
            }
        }
        return null;
    }

    private class RequestsServer extends CyclicBehaviour
    {
        private int sendQuestionRand = 0; // Real random number

        @Override
        public void action()
        {
            /*MessageTemplate mt  = MessageTemplate.MatchPerformative(ACLMessage.CFP);
            ACLMessage      msg = myAgent.receive(mt);
            ACLMessage      reply;
            if (msg != null)
            {
                reply = msg.createReply();
                Question questions = null;
                String message = msg.getContent();
                if (message.equalsIgnoreCase("Get complex"))
                {
                    reply.setPerformative(ACLMessage.PROPOSE);
                    reply.setContent(String.valueOf(maxComp + minComp));
                }
                else
                {
                    if (message.equalsIgnoreCase("Get rand question"))
                    {
                        if (sendQuestionRand < data.size())
                        {
                            sendQ.clear();
                            questions = data.get(sendQuestionRand);
                        }
                        sendQuestionRand += 1;
                    }
                    else
                    {
                        String args[] = message.split(";");
                        if (args[0].equalsIgnoreCase("Get question by complex"))
                        {
                            questions = getQuestion(Integer.parseInt(args[1]), args[2]);
                            sendQ.add(questions);
                        }
                    }
                    if (questions != null)
                    {
                        reply.setPerformative(ACLMessage.PROPOSE);
                        try
                        {
                            reply.setContentObject(questions);
                        }
                        catch (IOException e)
                        {
                            e.printStackTrace();
                        }
                    }
                    else
                    {
                        reply.setPerformative(ACLMessage.REFUSE);
                        reply.setContent("not-available");
                    }
                }
                myAgent.send(reply);
            }
            else
            {
                block();
            }*/
        }
    }

}
